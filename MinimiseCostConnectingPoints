#You are given an array, ‘COORDINATES’ that represents the integer coordinates of some points 
#on a 2D plane. Your task is to find the minimum cost to make all the points connected where 
#the cost of connecting two points: (x1, y1) and (x2, y2) is equal to the manhattan distance 
#between them, i.e., |x1 - x2| + |y1 - y2|.
import heapq
def minimiseCost(points):
   points_set = set(range(len(points)))
   heap = [(0, 0)]
   visited_node = set()
   total_distance = 0
   while heap and len(visited_node) < len(points):
      distance, current_index = heapq.heappop(heap)
      if current_index not in visited_node:
         visited_node.add(current_index)

         points_set.discard(current_index)
         total_distance += distance
         x0, y0 = points[current_index]
         for next_index in points_set:
            x1, y1 = points[next_index]
            heapq.heappush(heap, (abs(x0 - x1) + abs(y0 - y1), next_index))
   return total_distance
points = [(0,0),(3,3),(2,10),(6,3),(8,0)]
print(minimiseCost(points))
