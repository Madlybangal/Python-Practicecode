# heapify function: This function ensures that the subtree rooted at index i 
# satisfies the heap property. It compares the root with its children and swaps it
# with the largest child if necessary, then recursively heapifies the affected 
# subtree.
def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    left = 2 * i + 1  # left child index
    right = 2 * i + 2  # right child index
    # Check if left child exists and is greater than root
    if left < n and arr[left] > arr[largest]:
        largest = left
    # Check if right child exists and is greater than largest so far
    if right < n and arr[right] > arr[largest]:
        largest = right
    # If largest is not root, swap and continue heapifying
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # swap
        heapify(arr, n, largest)

# build_heap function: This function builds a max heap from an unordered array. 
# It calls the heapify function starting from the last non-leaf node down to the 
# root.
def build_heap(arr):
    n = len(arr)
    
    for i in range(n // 2 - 1, -1, -1):
        print("i", i)
        print("n", n)
        heapify(arr, n, i)
        

print("__name__",__name__) 
if __name__=='__main__':
    arr = [3, 5, 1, 10, 2, 7]
    print("Original array:", arr)
    build_heap(arr)
    print("Heapified array:", arr)