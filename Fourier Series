#Fourier Transform
import numpy as np
from matplotlib import pyplot as plt
from scipy.io.wavfile import write
from scipy.fft import fft, fftfreq
from scipy.fft import rfft, rfftfreq
from scipy.fft import irfft
#Sine waves are sometimes called pure tones because they represent a single frequency. 
#You’ll use sine waves to generate the audio since they will form distinct peaks in the 
#resulting frequency spectrum.
#Creating a Signal
#SAMPLE_RATE determines how many data points the signal uses to represent the sine wave per 
# second. So if the signal had a sample rate of 10 Hz and was a five-second sine wave, then it 
# would have 10 * 5 = 50 data points.
#DURATION is the length of the generated sample

SAMPLE_RATE = 44100  # Hertz
DURATION = 5  # Seconds

def generate_sine_wave(freq, sample_rate, duration):
    x = np.linspace(0, duration, sample_rate * duration, endpoint=False)
    frequencies = x * freq
    # 2pi because np.sin takes radians
    y = np.sin((2 * np.pi) * frequencies)
    return x, y

# Generate a 2 hertz sine wave that lasts for 5 seconds
x, y = generate_sine_wave(2, SAMPLE_RATE, DURATION)
plt.close('chart_somu')
plt.figure('chart_somu')
plt.plot(x, y)
plt.show()
#Mixing Audio Signals
#High pitch gets multiplied by 0.3 to reduce its power.
# underscore (_) to discard the x values returned by generate_sine_wave()
_, nice_tone = generate_sine_wave(400, SAMPLE_RATE, DURATION)
_, noise_tone = generate_sine_wave(4000, SAMPLE_RATE, DURATION)
noise_tone = noise_tone * 0.3
mixed_tone = nice_tone + noise_tone
#Normalization means scaling the signals in identical level. If you normalize the signals in 
#power level, that means all the signals have same power now.
#The next step is normalization, or scaling the signal to fit into the target format.
#Here target format is a 16-bit integer, which has a range from -32768 to 32767.
normalized_tone = np.int16((mixed_tone / mixed_tone.max()) * 32767)
plt.close('Normalised_Chart')
plt.figure('Normalised_Chart')
plt.plot(normalized_tone[:1000])
plt.show()
#To listen to the audio, you need to store it in a format that an audio player can read. 
#The easiest way to do that is to use SciPy’s wavfile.write method to store it in a WAV file.
#16-bit integers are a standard data type for WAV files, so you’ll normalize your signal to 
#16-bit integers 
write("C:/Users/703221527/OneDrive - Genpact/Desktop/Today/mysinewave.wav", SAMPLE_RATE, normalized_tone)
#next step is removing the high-pitch tone using the Fourier transform using the Fast Fourier 
#Transform (FFT)
#FFT is an algorithm that implements the Fourier transform and can calculate a frequency spectrum
#for a signal in the time domain
#This code will calculate the Fourier transform of your generated audio and plot it before 
#breaking it down.
#The negative-positive symmetry is a side effect of putting real-valued input into the Fourier transform.

# Number of samples in normalized_tone
N = SAMPLE_RATE * DURATION
#fft() calculates the transform itself.
yf = fft(normalized_tone)
print("yf: ",yf)
#fftfreq() calculates the frequencies in the center of each bin in the output of fft(). Without this, 
#there would be no way to plot the x-axis on your frequency spectrum
#A bin is a range of values that have been grouped, like in a histogram.
xf = fftfreq(N, 1 / SAMPLE_RATE)
#You call np.abs() on yf because its values are complex
#Since complex numbers have two parts, graphing them against frequency on a two-dimensional 
#axis requires you to calculate a single value from them. This is where np.abs() comes in. 
#It calculates √(a² + b²) for complex numbers, which is an overall magnitude for the two numbers
#together and importantly a single value
plt.plot(xf, np.abs(yf))
plt.show()
#Making It Faster With rfft()
#The frequency spectrum that fft() outputted was reflected about the y-axis so that the negative
#half was a mirror of the positive half. This symmetry was caused by inputting real numbers 
#(not complex numbers) to the transform
# Note the extra 'r' at the front

#rfft() returns only half the output that fft() 
#rfft() still produces complex output, so the code to plot its result remains the same. 
#The plot, however, should look like the following since the negative frequencies will have 
#disappeared
#values returned by rfft() represent the power of each frequency bin.
yf = rfft(normalized_tone)
xf = rfftfreq(N, 1 / SAMPLE_RATE)
#image above is just the positive side of the frequency spectrum that fft() produces. 
#rfft() never calculates the negative half of the frequency spectrum, which makes it faster 
#than using fft().

plt.plot(xf, np.abs(yf))
plt.show()
#Using the length of xf, the maximum frequency, and the fact that the frequency bins are evenly
#spaced, you can work out the target frequency’s index
# The maximum frequency is half the sample rate
points_per_freq = len(xf) / (SAMPLE_RATE / 2)
# Our target frequency is 4000 Hz
target_idx = int(points_per_freq * 4000)
#You can then set yf to 0 at indices around the target frequency to get rid of it
yf[target_idx - 1 : target_idx + 2] = 0
plt.plot(xf, np.abs(yf))
plt.show()
new_sig = irfft(yf)
#you can see, you now have a single sine 
#wave oscillating at 400 Hz, and you’ve successfully removed the 4000 Hz noise
plt.plot(new_sig[:1000])
plt.show()
#Once again, you need to normalize the signal before writing it to a file.
norm_new_sig = np.int16(new_sig * (32767 / new_sig.max()))
write("C:/Users/703221527/OneDrive - Genpact/Desktop/Today/clean.wav", SAMPLE_RATE, norm_new_sig)
