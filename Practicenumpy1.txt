#broadcasting arrays
import numpy as np
#var1=np.array([1,2,3,4])
#var2=np.array([1,2,3])
#print(var1+var2)
var1=np.array([[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]])
print("var1 Shape:  ",var1.shape)
var2=np.array([[5,4,1,2]])
print("var2 Shape:  ",var2.shape)
print(var1+var2)
#2X1 3X2
v1=np.array([[1,2,3,4,5],[1,2,3,4,5]])
print ("v1 shape: ", v1.shape )
v2=np.array([[1,2],[2,2]])
print ("v2 shape: ", v2.shape )
#print(v1+v2)
#Indexing and slicing
var2=np.array([[[1,2],[6,7]]])
print(var2[0,1,1])
#slicing
var=np.array([1,2,3,4,5,6,7])
print("2:5 ",var[1:5])
print("2 to End ",var[1:])
print("without start end: ",var[::2])

var1=np.array([[1,2,3,4],[4,5,6,7],[11,12,13,14]])
print(var1.shape)
print("5to 7: ", var1[1,1:])
#Iteration
var1=np.array([[5,4,3,2],[6,7,8,9]])
print("var1: ",var1)
for j in var1:
    for k in j:
        print(k)

#Iteration without nested for loop
var3=np.array([[[9,8,7,6],[5,4,3,2]]])
for i in np.nditer(var3):
    print(i)

var3=np.array([[[9,8,7,6],[5,4,3,2]]])
for i,d in np.ndenumerate(var3):
    print(i,d)

#copy vs view
varcop=np.array([4,3,2,1])
co=varcop.copy()
print("copy ",co)

varvi=np.array([4,3,2,1])
vi=varvi.view()
print("View ",vi)

#Join array

var=np.array([2,3,4,5])
var1=np.array([7,8,9,10])
arr=np.concatenate((var,var1))
print("arr: ",arr)

vr=np.array([[2,3],[4,5]])
vr1=np.array([[7,8],[9,10]])
ar_new=np.concatenate((vr,vr1),axis=0)
print("ar_new: ",ar_new)
#Join using stack
var_1=np.array([1,2,3,4])
var_2=np.array([9,8,7,6])
a_new=np.stack((var_1,var_2),axis=1)
a_new1=np.hstack((var_1,var_2))
a_new2=np.vstack((var_1,var_2))
a_new3=np.dstack((var_1,var_2))
print("a_new: ", a_new)
print("a_new1: ", a_new1)
print("a_new2: ", a_new2)
print("a_new3: ", a_new3)

#Split
var=np.array([3,4,5,6,7])
ar_spl=np.array_split(var,3)
print("ar_spl: ",ar_spl)
print("ar_spl[0]: ",ar_spl[0])
#split two dimensional array
var1=np.array([[1,2],[3,4],[5,6]])
ar_spl1=np.array_split(var1,3,axis=1)
print("ar_spl: ",ar_spl)
print("ar_spl1: ",ar_spl1)

#Search
var=np.array([2,3,4,5,6,1,3,2,3,5,4])
x=np.where(var==2)
print("x: ",x)
y=np.where((var%2)==0)
print("y: ",y)

#SearchSorted Array
var1=np.array([1,2,3,4,5,6,7,8])
x1=np.searchsorted(var1,5)
print("x1: ",x1)
#side means direction of searching
x2=np.searchsorted(var1,[5,6,7], side='right')
print("x2: ",x2)

#Sort
var_1=np.array([4,2,3,5,6,7,8,22,23,24])
print(np.sort(var_1))

#Filter array
var_3=np.array(['z','l','a','p','q','d'])
f=[False,True,True,False,True,False]
new_arr=var_3[f]
print("new_arr: ",new_arr)
#shuffle function
var_s=np.array([3,5,7,23,12,11,10])
np.random.shuffle(var_s)
print("Shuffle: ",var_s)
#unique function
var_rep=np.array([7,12,3,2,6,7,8,11,12,10,7])
x_unique=np.unique(var_rep,return_index=True,return_counts=True)
print("Unique: ",x_unique)

#Resize function
var2=np.array([9,10,14,4,3,5,6,2,7,9])
y=np.resize(var2,(5,2))
print("Resize: ", y)

#Flatten
#Parameters :
# order : [{‘C’, ‘F’, ‘A’, ‘K’}, optional] ‘C’ means to flatten in row-major (C-style) order. ‘F’ means to flatten in column-major 
# (Fortran- style) order. ‘A’ means to flatten in column-major order if a is Fortran contiguous in memory, row-major order otherwise. 
# ‘K’ means to flatten a in the order the elements occur in memory. The default is ‘C’.
var2=np.array([9,10,14,4,3,5,6,2,7,9])
y=np.resize(var2,(5,2))
print("Flatten: ", y.flatten(order='C'))
print("Ravel: ", np.ravel(y,order='F'))

#Insert
var=np.array([4,5,2,3,5])
v_ins=np.insert(var,(2,4),40)
print("Insert: ",v_ins)
#Insert two dimensional array
var1=np.array([[1,2,3],[4,5,6]])
v1=np.insert(var1,2,6,axis=0)
print(v1)
#Delete
var1=np.array([4,5,6,7,8])
d=np.delete(var1,2)
print("Delete: ",d)

#Matrix
varmatr=np.matrix([[1,2,3],[4,5,6]])
print("Matrix: ",varmatr)
print(type(varmatr))
#No difference in addtion with array
vararr=np.array([[1,2,3],[4,5,6]])
print("array: ",vararr)
print(type(vararr))

#Matrix multiplication follows rule row by column
varm=np.matrix([[1,2],[3,4]])
var1m=np.matrix([[1,2],[1,2]])
print("Matrix multiplication: ",varm*var1m)
#Matrix functions
#Transpose
var=np.matrix([[1,2,3],[4,5,6]])
print("Transpose: ",np.transpose(var))
print("Swapaxes: ",np.swapaxes(var,0,1))
var1=np.matrix([[1,2],[4,5]])
print("Inverse: ",np.linalg.inv(var1))
#Power
var4=np.matrix([[1,2],[3,4]])
print("Power+: ",np.linalg.matrix_power(var4,2))
print("Power0: ",np.linalg.matrix_power(var4,0))
print("Power0: ",np.linalg.matrix_power(var4,-2))
#Determinate
var=np.matrix([[1,2,3],[4,5,6],[4,5,6]])
print("Determinate: ",np.linalg.det(var))
